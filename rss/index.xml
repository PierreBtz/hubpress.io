<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Pierre Beitz]]></title><description><![CDATA[Notepad of a Software Engineer]]></description><link>https://PierreBtz.github.io</link><generator>RSS for Node</generator><lastBuildDate>Sun, 04 Dec 2016 14:57:30 GMT</lastBuildDate><atom:link href="https://PierreBtz.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Docker starter kit part 1: Getting Started, Container's lifecycle]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Docker is a major change in the way we develop software.
But it can be a bit challenging for a developer to enter the container world.
This series of articles is an answer to a developer wanting to onboard the Docker train.
It is not designed to be a complete docker training (these already exist), but rather a starter kit to quickly get up to speed.</p>
</div>
<div class="paragraph">
<p>There is not a fixed number of parts for this series as I am not sure yet how far I want to go (for instance I am not sure yet if I will talk about Docker compose or Docker Swarm).
Of course, do not hesitate to point any mistake or omission.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_getting_started">Getting Started</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_os">OS</h3>
<div class="paragraph">
<p>OS does not matter anymore.
Docker is now available natively on Windows 10 (from 1511 November update, Build 10586), OSX and Linux.
I use it without any problem on OSX and a debian at work, and on Windows 10 and a Linux Mint at home.
What I recommand though is to avoid the non native solutions for older OSX and Windows 7/10.
My experience with them was just awful: a lot of issues, of instabilities as well as some strange behaviors.</p>
</div>
</div>
<div class="sect2">
<h3 id="_let_s_go">Let&#8217;s go!</h3>
<div class="paragraph">
<p>Well, this part will be pretty simple.
Go to the <a href="https://www.docker.com/products/docker#/windows">official page</a>, and follow the official tutorial:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://docs.docker.com/engine/getstarted/step_one/">Installation</a></p>
</li>
<li>
<p><a href="https://docs.docker.com/engine/getstarted/step_two/">Images and Containers</a></p>
</li>
<li>
<p><a href="https://docs.docker.com/engine/getstarted/step_three/">Run your first image</a></p>
</li>
<li>
<p><a href="https://docs.docker.com/engine/getstarted/step_four/">Build your first image</a></p>
</li>
<li>
<p><a href="https://docs.docker.com/engine/getstarted/step_five/">Create your Docker Hub account</a> this part can be skipped if you have access to a private repository</p>
</li>
<li>
<p><a href="https://docs.docker.com/engine/getstarted/step_six/">Push and Pull an image</a> if you are using a private repository, the name of the image becomes $private_repo/docker-whale</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In the following, I will assume you have the basic understanding that the tutorial gave you.</p>
</div>
<div class="paragraph">
<p>EDIT (04/12/2016): You can also have a look to the blog of <a href="http://jmkhael.io/">Johnny Mkhael</a> who wrote a <a href="http://jmkhael.hopto.org/hello-docker/">Hello Docker</a> blog series.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_lifecyle_of_a_container">Lifecyle of a container</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_overview">Overview</h3>
<div class="paragraph">
<p>A Docker Container can have multiple states.
Here is a complete list of the different states as well as the associated commands from the official documentation:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://docs.docker.com/engine/reference/api/images/event_state.png" alt="Docker States">
</div>
</div>
<div class="paragraph">
<p>As you can see, there are multiple state possible.</p>
</div>
</div>
<div class="sect2">
<h3 id="_main_states">Main States</h3>
<div class="paragraph">
<p>The main states are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>created</strong>: your container has been created.
This means you have created an instance of an image.
You get to this state by running the command <a href="https://docs.docker.com/engine/reference/commandline/create/">docker create</a></p>
</li>
</ul>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
Remember what you saw in the tutorial, an image does not have a state and never changes.
</td>
</tr>
</table>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>running</strong>: The container is running which means it has been created (<a href="https://docs.docker.com/engine/reference/commandline/create/">docker create</a>) and started (<a href="https://docs.docker.com/engine/reference/commandline/start/">docker start</a>).
You can also directly reach this state from an image by running <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p>
</li>
<li>
<p><strong>paused</strong>: A paused container is in a frozen state but its main process <strong>has not been stopped</strong> (the SIGTERM signal was not sent from docker to PID1 process).
The container has not released its ressources (eg memory).
From a running container you reach this state with the <a href="https://docs.docker.com/engine/reference/commandline/pause/">docker pause</a>.
It can be unfrozen using the <a href="https://docs.docker.com/engine/reference/commandline/unpause/">docker unpause</a>.</p>
</li>
<li>
<p><strong>stopped</strong>: When stopping a container, the SIGTERM signal has been sent from docker to the main process.
After a waiting time (10 seconds by default), the main process will receive a SIGKILL signal.
You can stop a container using <a href="https://docs.docker.com/engine/reference/commandline/stop/">docker stop</a>.
NB: You can also directly send a SIGKILL signal using <a href="https://docs.docker.com/engine/reference/commandline/kill/">docker kill</a>.
It is probably not a good idea if you wish to restart your container.
You can move from a stopped container to a running container using the docker start command.</p>
</li>
</ul>
</div>
</div>
</div>
</div>]]></description><link>https://PierreBtz.github.io/2016/11/27/Docker-starter-kit-part-1-Getting-Started-Containers-lifecycle.html</link><guid isPermaLink="true">https://PierreBtz.github.io/2016/11/27/Docker-starter-kit-part-1-Getting-Started-Containers-lifecycle.html</guid><category><![CDATA[HowTo]]></category><category><![CDATA[ Docker]]></category><dc:creator><![CDATA[Pierre Btz]]></dc:creator><pubDate>Sun, 27 Nov 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Running fish on Windows 10]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>You may already know that the latest Windows 10 builds offer a bash in Windows. This is a great feature. But what is even more interesting is that Microsoft did not do an emulation of linux commands but they partnered up with Canonical instead and integrated a real Ubuntu image on top of Windows. This means that you can run commands like&#8230;&#8203;apt-get in this bash.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="__any_shell_for_windows">'Any Shell for Windows'</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In other words, this means that potentially, the 'bash for Windows' feature, could be understood like an 'any shell for Windows' feature! I decided to give it a try with fish. <a href="https://fishshell.com/">Fish</a> is an amazing shell a colleague of mine showed me some time ago. I am now using it every day at work and I was missing it at home on my Windows machine. It is really simple to use, it has a powerful autosuggestion engine, and it is easily extensible with scripts&#8230;&#8203;and a lot of people distribute great scripts!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how_to_install_fish">How to install fish?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I will assume here that you already know how to install bash for Windows. If not, there are plenty of blogs that have detailed step by step guides. Once you are running bash, it is simply a matter of following the <a href="https://github.com/fish-shell/fish-shell/wiki/Nightly-builds">fish installation instruction for Ubuntu</a>, that is to say:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">sudo add-apt-repository ppa:fish-shell/nightly-master
sudo apt-get update
sudo apt-get install fish</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now you can just type fish in your prompt, and you are done. Unfortunately, next time you will launch an Unix shell from Windows it will have to be a bash. Good news is that it is easy to customize bash startup with the <strong>.bashrc</strong> file. To do this, first go to your unix home. Be careful, when you launch a bash, Windows puts you under your Windows' home (/mnt/c/Users/YourUser) and not under Unix&#8217;s home (~). To be sure, type:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">cd
nano .bashrc</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then add a the beginning of your .bashrc file the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">if [ -t 1 ]; then
  exec fish
fi</code></pre>
</div>
</div>
<div class="paragraph">
<p>Be careful not to just <strong>exec fish</strong>, you could break some programs and scripts relying on bash.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_scripting">Scripting</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I installed <a href="https://github.com/fisherman/fisherman">fisherman</a> to manage the scripts of my fish installation. No ad intended, I don&#8217;t have enough feedback on it to give advice yet. Just know that there are other plugin managers out there, like <a href="https://github.com/oh-my-fish/oh-my-fish">oh my fish</a>. Here again, no need to adapt the installation instructions, everything worked as it would on Unix. For instance, I decided to install a useful teleporter script that allows to set labels on directories and jump back and forth:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">#install fisherman
curl -Lo ~/.config/fish/functions/fisher.fish --create-dirs git.io/fisher
#install the tp script
fisher install simonrelet/tp-fish-function</code></pre>
</div>
</div>
<div class="paragraph">
<p>And here is the result:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://github.com/PierreBtz/pierrebtz.github.io/raw/master/images/fishWin10_1.png" alt="result">
</div>
</div>
<div class="paragraph">
<p>I hope this was helpful. I&#8217;m still new to fish, feel free to drop a comment with tips or useful scripts! Of course, the main focus of the article was on fish, but I&#8217;m pretty sure that you can run any Unix shell you like using the same method.</p>
</div>
</div>
</div>]]></description><link>https://PierreBtz.github.io/2016/10/09/Running-fish-on-Windows-10.html</link><guid isPermaLink="true">https://PierreBtz.github.io/2016/10/09/Running-fish-on-Windows-10.html</guid><category><![CDATA[HowTo]]></category><category><![CDATA[ Windows 10]]></category><category><![CDATA[ Fish]]></category><dc:creator><![CDATA[Pierre Btz]]></dc:creator><pubDate>Sun, 09 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Welcome Blogging World!]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>The idea of blogging has been making its way in my head for some time now. I&#8217;m already used to blogging on the internal blog of my company, but the audience is really small&#8230;&#8203;and so is the feedback.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_who_am_i">Who am I?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>By day, I am a UI developer working on multiple stacks going from Swing to Angular 2.0. I am also in charge of the Continuous Integration in my team.</p>
</div>
<div class="paragraph">
<p>I am interested in a lot of development topics, especially the subjects of Continuous Integration, Continous Delivery, Testing and Clean Coding.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_what_to_expect_from_this_blog">What to expect from this blog?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The main idea behind this blog is to share some thoughts about my readings, or the conferences I saw. I would also like to share some of my experiment. As the title suggests, I see this blog as a notepad, for my future self&#8230;&#8203;and for anyone who might have some interest on what I have to say.</p>
</div>
</div>
</div>]]></description><link>https://PierreBtz.github.io/2016/10/02/Welcome-Blogging-World.html</link><guid isPermaLink="true">https://PierreBtz.github.io/2016/10/02/Welcome-Blogging-World.html</guid><category><![CDATA[welcome]]></category><dc:creator><![CDATA[Pierre Btz]]></dc:creator><pubDate>Sun, 02 Oct 2016 00:00:00 GMT</pubDate></item></channel></rss>